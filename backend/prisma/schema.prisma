generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Episode {
  id                   String          @id @default(uuid())
  episodeTitle         String          @db.VarChar(500)
  episodeLinkToEpisode String          @db.VarChar(500)
  episodeSummary       String          @db.Text
  episodeEnclosure     String          @db.VarChar(500)
  episodeLanguage      String          @db.VarChar(500)
  podcastGuid          String          @db.VarChar(500)
  episodeGuid          String          @unique @db.VarChar(500)
  episodeDuration      Int
  youtubeVideoLink     String?
  indexed              Boolean         @default(false)
  createdAt            DateTime?       @default(now())
  updatedAt            DateTime?       @updatedAt
  errorCount           Int             @default(0)
  audioProcessed       Boolean         @default(false)
  youtubeProcessed     Boolean         @default(false)
  podcast              Podcast         @relation(fields: [podcastGuid], references: [podcastGuid], onDelete: Cascade)
  segments             Segment[]
  transcription        Transcription[]

  @@index([podcastGuid], map: "Episode_podcastGuid_fkey")
}

model Podcast {
  id                      String          @id @default(uuid())
  url                     String          @db.VarChar(500)
  title                   String          @db.VarChar(500)
  link                    String          @db.VarChar(500)
  contentType             String          @db.VarChar(500)
  originalUrl             String          @db.VarChar(500)
  itunesAuthor            String          @db.VarChar(500)
  itunesOwnerName         String          @db.VarChar(500)
  itunesType              String          @db.VarChar(500)
  generator               String          @db.VarChar(500)
  language                String          @db.VarChar(500)
  chash                   String          @db.VarChar(500)
  host                    String          @db.VarChar(500)
  category1               String          @db.VarChar(500)
  category2               String          @db.VarChar(500)
  category3               String          @db.VarChar(500)
  category4               String          @db.VarChar(500)
  category5               String          @db.VarChar(500)
  category6               String          @db.VarChar(500)
  category7               String          @db.VarChar(500)
  category8               String          @db.VarChar(500)
  category9               String          @db.VarChar(500)
  category10              String          @db.VarChar(500)
  imageUrl                String          @db.VarChar(500)
  newestEnclosureUrl      String          @db.VarChar(500)
  description             String          @db.Text
  podcastGuid             String          @unique
  explicit                Int
  dead                    Int
  itunesId                Int
  episodeCount            Int
  lastHttpStatus          Int
  popularityScore         Int
  newestEnclosureDuration Int
  priority                Int
  updateFrequency         Int
  createdAt               DateTime?       @default(now())
  updatedAt               DateTime?       @updatedAt
  indexed                 Boolean         @default(false)
  episode                 Episode[]
  segment                 Segment[]
  Transcription           Transcription[]
}

model Segment {
  id                    String        @id @default(uuid())
  start                 Float
  end                   Float
  language              String        @db.VarChar(500)
  belongsToPodcastGuid  String        @db.VarChar(500)
  belongsToEpisodeGuid  String        @db.VarChar(500)
  belongsToTranscriptId String        @db.VarChar(500)
  text                  String        @db.VarChar(500)
  indexed               Boolean       @default(false)
  createdAt             DateTime?     @default(now())
  updatedAt             DateTime?     @updatedAt
  isYoutube             Boolean       @default(false)
  surroundingText       String        @db.VarChar(500)
  episode               Episode       @relation(fields: [belongsToEpisodeGuid], references: [episodeGuid], onDelete: Cascade)
  podcast               Podcast       @relation(fields: [belongsToPodcastGuid], references: [podcastGuid], onDelete: Cascade)
  transcription         Transcription @relation(fields: [belongsToTranscriptId], references: [id], onDelete: Cascade)

  @@unique([belongsToEpisodeGuid, start, end, isYoutube])
  @@index([belongsToPodcastGuid], map: "Segment_belongsToPodcastGuid_fkey")
  @@index([belongsToTranscriptId], map: "Segment_belongsToTranscriptId_fkey")
}

model Transcription {
  id                   String    @id @default(uuid())
  language             String    @db.VarChar(500)
  belongsToPodcastGuid String    @db.VarChar(500)
  belongsToEpisodeGuid String    @db.VarChar(500)
  transcription        String    @db.MediumText
  indexed              Boolean   @default(false)
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  isYoutube            Boolean   @default(false)
  segments             Segment[]
  episode              Episode   @relation(fields: [belongsToEpisodeGuid], references: [episodeGuid], onDelete: Cascade)
  Podcast              Podcast   @relation(fields: [belongsToPodcastGuid], references: [podcastGuid])

  @@unique([belongsToEpisodeGuid, isYoutube])
  @@index([belongsToPodcastGuid], map: "Transcription_belongsToPodcastGuid_fkey")
}
